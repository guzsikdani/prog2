<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
            Egy "örökké létező önmagát újra és újra reprodukáló, kaotikus, inflálódó világegyetemet ábrázol."  
            A minta megfigyelése csak a legújabb technológiai vívmányok segítségével vált lehetségessé. 
            Szabad szemmel ugyanis csak villózó fényeket láthatnánk. Pedig ezek valójában végtelenszer ismétlődő Mandelbrot halmazok. 
        </para>
        <figure>
            <title>Mandelbrot kétdimenziós koordinátarendszerben való ábrázolása</title>
        <mediaobject>
                    <imageobject>
                        <imagedata fileref="img/Mandelset.png" scale="50" />
                    </imageobject>
                    <textobject>
                        <phrase>Mandelbrot kétdimenziós koordinátarendszerben való ábrázolása</phrase>
                    </textobject>
        </mediaobject>
        </figure>
        <para>
            A Mandelbrot halmaz, egy, a komplex számsíkon vizuálisan ábrázolható fraktál-minta. Ahhoz, hogy értelmezhessük ezt a mondatot, 
            haladjuk szépen sorban. 
            Mi is az a komplex szám? Valószínűleg mindenki meg tudja mondani, hogy mennyi 4-nek a négyzetgyöke(2), vagy 16-nak (4). De tudjuk-e, hogy mennyi -1-nek?
            A válasz pedig <prompt>i</prompt>, egy kitalált szám, melyet négyzetre emelve -1-et kapunk. Ha összekapcsolunk egy valós számot, 
            pl.: 3-at az<prompt>i</prompt>-vel, akkor az így kapott <prompt>3i</prompt> egy <prompt>komplex szám</prompt> lesz. A 3 a valós rész, 
            az <prompt>i</prompt> pedig a képzetes (imaginárius) rész.
        </para>
        <para>
            Ahhoz, hogy a komplex számokat vizualizálni tudjuk, szükség van egy Descartes-féle derékszögű koordináta rendszerhez hasonló 2 dimenziós térre.
            Ez lesz a komplex számsík. A vízszintes tengely lesz a valós tengely, a függőleges tengely pedig a  képzetes tengely. Ezen a számsíkon képesek vagyunk 
            ábrázolni minden komplex számot. Az így ábrázolt elemek talán legfontosabb eleme az origótól való távolsága. Ez által sokkal egyszerűbben vizualizálhatjuk
            nem csak magukat a számokat, de a velük elvégezhető műveleteket is (összeadás, kivonás). De hogy jutunk el innen, a Mandelbrot halmazig?
        </para>
        <programlisting language = "c++"><![CDATA[#include <png++/png.hpp>

#define N 800
#define M 800
#define MAXX 0.7
#define MINX -2.0
#define MAXY 1.35
#define MINY -1.35]]></programlisting> 
        <para>
            A <link xlink:href="http://savannah.nongnu.org/projects/pngpp/">png++</link> csomag segítségével fogjuk kirajzoltatni egy fájlba az eredményt.
            Definiáljuk az elkészíteni kívánt kép méreteit, illetve a koordinátarendszeren a tartományt, amin belül szeretnénk, hogy a program dolgozzon.
        </para>
        <programlisting language = "c++"><![CDATA[void GeneratePNG( int tomb[N][M])
{
    png::image< png::rgb_pixel > image(N, M);
    for (int x = 0; x < N; x++)
    {
        for (int y = 0; y < M; y++)
        {
            image[x][y] = png::rgb_pixel(tomb[x][y], tomb[x][y], tomb[x][y]);
        }
    }
    image.write("mandelbrot1.png");
}]]></programlisting>
        <para>
            Az ez után létrehozott függvény fogja nekünk kiírni a halmaz képét soronként és oszloponként haladva egy <prompt>png</prompt> fájlba.
        
        </para>
        <programlisting language = "c++"><![CDATA[struct Komplex
{
    double re, im;
};]]></programlisting>
        <para>
            A komplex számok ábrázolásához létrehozott struktúra valós és imaginárius értékekkel.
        </para>
        <programlisting language = "c++"><![CDATA[int main()
{
    int tomb[N][M];

    int i, j, k;

    double dx = (MAXX - MINX) / N;
    double dy = (MAXY - MINY) / M;

    struct Komplex C, Z, Zuj;

    int iteracio;

    for (i = 0; i < M; i++)
    {
        for (j = 0; j < N; j++)
        {
            C.re = MINX + j * dx;
            C.im = MAXY - i * dy;

            Z.re = 0;
            Z.im = 0;
            iteracio = 0;

            while(Z.re * Z.re + Z.im * Z.im < 4 && iteracio++ < 255)
            {
                Zuj.re = Z.re * Z.re - Z.im * Z.im + C.re;
                Zuj.im = 2 * Z.re * Z.im + C.im;
                Z.re = Zuj.re;
                Z.im = Zuj.im;
            }

            tomb[i][j] = 256 - iteracio;
        }
    }

    GeneratePNG(tomb);

    return 0;
}]]></programlisting>
        <para>
            Számolni kezdjük a f<subscript>c</subscript>(z)=z<superscript>2</superscript>+c iterációit. Végiglépkedünk a rácspontokon.
            C.re (valós rész) és C.im (imaginárius rész) a háló rácspontjainak megfelelő komplex számot alkotják. 
            Z.re és Z.im iterációs komplex szám részei. Amennyiben az iterációk során a c távolsága a Z<subscript>0</subscript> ponttól
            (azaz az origótól) nagyobb lesz mint 2, vagy eléjük az iterációs maximumot, akkor az érték nem lesz eleme a mandelbrot halmaznak.
        </para>
        
        <para>
            Megoldás forrása: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#mandelbrot_halmaz">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html#mandelbrot_halmaz</link>         
        </para>
        

        
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
       <para>
            Az <prompt>complex</prompt> osztály beemelésével lehetőségünk lesz olyan komplex típusokat deklarálni, amelyek egy változónak
            a valós és imaginárius részét is el tudják tárolni. Így az algoritmus komplex számait egy egységként lehet kezelni. 
        </para>
        <para>
            <programlisting language= "c++"><![CDATA[#include <iostream>
#include "png++/png.hpp"
#include <complex>

int
main ( int argc, char *argv[] )
{

  int szelesseg = 1366;
  int magassag = 1024;
  int iteraciosHatar = 255;
  double a = -2;
  double b = 0.7;
  double c = -1.35;
  double d = 1.35;]]></programlisting>
            Definiáljuk az elkészíteni kívánt kép méreteit, illetve a koordinátarendszeren a tartományt, amin belül szeretnénk, hogy a program dolgozzon.             
        </para>
        <para>
            <programlisting language= "c++"><![CDATA[if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }]]></programlisting>
            A program futtatásánál megadható argumentumokat vizsgáljuk. Minden egyes argumentumot beolvasáskor egy egésszé vagy egy lebegőpontos számmá
            alakítunk át, majd elhelyezzük őket egy tömbben. Így állíthatjuk a képméretet és a valós-számrendszer beli tartományt.
        </para>
         <para>
            <programlisting language= "c++"><![CDATA[  png::image < png::rgb_pixel > kep ( szelesseg, magassag );

  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;

  std::cout << "Szamitas\n";

  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      // k megy az oszlopokon

      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC ); 

          std::complex<double> z_n ( 0, 0 );  
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }

          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }

      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }

  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;

}]]></programlisting>
            A kép, mint 2 dimenziós objektum pixeleit egyesével kezdjük el vizsgálni, hogy része lesz-e a Mandelbrot halmazunknak.
            A while ciklus belseje az előző Mandelbrot halmaz pontban vázolt
            algoritmushoz képest nagyon leegyszerűsödik, hála a <prompt>sdt::complex</prompt> osztálynak.
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/gvaqijHlRUs">https://youtu.be/gvaqijHlRUs</link>
        </para>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
            Mik is a biomorfok? A biomorfok olyan alakzatok, melyek nagyon hasonlítanak egy természetes organizmus mikroszkópikus képére,
            viszont matematikai és nem biológiai eredetűek. 
            Mi esetünkben egy kétdimenziós számsíkon ábrázolt fraktólokról van szó. 
            Legismertebb fraktálok: "Julia-halmazok", "Mandelbrot-halmaz" és a véletlenül felfedezett "Biomorfok".         
        </para>
        <para>
            A különbség a Mandelbrot halmaz és a Julia halmazok között az, hogy a Mandelbrot-halmaz komplex iterációban a C változó:           
        </para>       
        <programlisting language="c++">
<![CDATA[  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      for ( int k = 0; k < szelesseg; ++k )
        {

          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam

          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );

          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;

          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;

              ++iteracio;
            }
]]>
        </programlisting>
        <para>
            Míg a Julia-halmaz ábrázolásánál a c konstans lesz. Minden vizsgált z rácspontra ugyanaz:
        </para>
        <programlisting language="c++">
<![CDATA[    // j megy a sorokon
    for ( int j = 0; j < magassag; ++j )
    {
        // k megy az oszlopokon
        for ( int k = 0; k < szelesseg; ++k )
        {
            double reZ = a + k * dx;
            double imZ = d - j * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {
                z_n = std::pow(z_n, 3) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }
]]>
        </programlisting>
        <para>
            A korábbi Mandelbrot halmazt kiszámoló 
            forráskódot módosítva:
        </para>       
        <programlisting language="c++">
<![CDATA[
int
main ( int argc, char *argv[] )
{

    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;

    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );

    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }

    png::image < png::rgb_pixel > kep ( szelesseg, magassag );

    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;

    std::complex<double> cc ( reC, imC );

    std::cout << "Szamitas\n";

    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon

        for ( int x = 0; x < szelesseg; ++x )
        {

            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );

            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {

                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }

            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }

        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }

    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;

}
]]>
        </programlisting>                
        
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>                       
    </section>                   

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <figure>
            <title>CUDA-s Mandelbrot halmaz váza,  600 x 600-as kép esetén:</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/CUDA.png" scale="20" />
                </imageobject>
                <textobject>
                    <phrase>CUDA-s Mandelbrot halmaz váza,  600 x 600-as kép esetén:</phrase>
                </textobject>
            </mediaobject>
        </figure>        
        <programlisting><![CDATA[#include <png++/image.hpp>
#include <png++/rgb_pixel.hpp>

#include <sys/times.h>
#include <iostream>


#define MERET 600
#define ITER_HAT 32000

__device__ int
mandel (int k, int j)
{
  // Végigzongorázza a CUDA a szélesség x magasság rácsot:
  // most eppen a j. sor k. oszlopaban vagyunk

  // számítás adatai
  float a = -2.0, b = .7, c = -1.35, d = 1.35;
  int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;

  // a számítás
  float dx = (b - a) / szelesseg;
  float dy = (d - c) / magassag;
  float reC, imC, reZ, imZ, ujreZ, ujimZ;
  // Hány iterációt csináltunk?
  int iteracio = 0;

  // c = (reC, imC) a rács csomópontjainak
  // megfelelő komplex szám
  reC = a + k * dx;
  imC = d - j * dy;
  // z_0 = 0 = (reZ, imZ)
  reZ = 0.0;
  imZ = 0.0;
  iteracio = 0;
  // z_{n+1} = z_n * z_n + c iterációk
  // számítása, amíg |z_n| < 2 vagy még
  // nem értük el a 255 iterációt, ha
  // viszont elértük, akkor úgy vesszük,
  // hogy a kiinduláci c komplex számra
  // az iteráció konvergens, azaz a c a
  // Mandelbrot halmaz eleme
  while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {
      // z_{n+1} = z_n * z_n + c
      ujreZ = reZ * reZ - imZ * imZ + reC;
      ujimZ = 2 * reZ * imZ + imC;
      reZ = ujreZ;
      imZ = ujimZ;

      ++iteracio;

    }
  return iteracio;
}


/*
__global__ void
mandelkernel (int *kepadat)
{

  int j = blockIdx.x;
  int k = blockIdx.y;

  kepadat[j + k * MERET] = mandel (j, k);

}
*/

__global__ void
mandelkernel (int *kepadat)
{

  int tj = threadIdx.x;
  int tk = threadIdx.y;

  int j = blockIdx.x * 10 + tj;
  int k = blockIdx.y * 10 + tk;

  kepadat[j + k * MERET] = mandel (j, k);

}

void
cudamandel (int kepadat[MERET][MERET])
{

  int *device_kepadat;
  cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));

  // dim3 grid (MERET, MERET);
  // mandelkernel <<< grid, 1 >>> (device_kepadat);
  
  dim3 grid (MERET / 10, MERET / 10);
  dim3 tgrid (10, 10);
  mandelkernel <<< grid, tgrid >>> (device_kepadat);  
  
  cudaMemcpy (kepadat, device_kepadat,
	      MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
  cudaFree (device_kepadat);

}

int
main (int argc, char *argv[])
{

  // Mérünk időt (PP 64)
  clock_t delta = clock ();
  // Mérünk időt (PP 66)
  struct tms tmsbuf1, tmsbuf2;
  times (&tmsbuf1);

  if (argc != 2)
    {
      std::cout << "Hasznalat: ./mandelpngc fajlnev";
      return -1;
    }

  int kepadat[MERET][MERET];

  cudamandel (kepadat);

  png::image < png::rgb_pixel > kep (MERET, MERET);

  for (int j = 0; j < MERET; ++j)
    {
      //sor = j;
      for (int k = 0; k < MERET; ++k)
	{
	  kep.set_pixel (k, j,
			 png::rgb_pixel (255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT));
	}
    }
  kep.write (argv[1]);

  std::cout << argv[1] << " mentve" << std::endl;

  times (&tmsbuf2);
  std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;

  delta = clock () - delta;
  std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;

}]]></programlisting>
        
        <figure>
            <title>CUDA-s kép kiszámítása ennyivel gyorsabb</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandelcuda.png" scale="40" />
                </imageobject>
                <textobject>
                    <phrase>CUDA-s kép kiszámításának időbeli különbsége a korábbi megoldáshoz képest:</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para>
            Megoldás videó: <link xlink:href="https://www.youtube.com/watch?v=gvaqijHlRUs">https://www.youtube.com/watch?v=gvaqijHlRUs</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tamop412A/2011-0063_01_parhuzamos_prog_linux/adatok.html">https://www.tankonyvtar.hu/hu/tartalom/tamop412A/2011-0063_01_parhuzamos_prog_linux/adatok.html</link>
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para>
        <para>
            Szükséges források:
        </para>
        <para>
            <link xlink:href="https://progpater.blog.hu/2011/02/26/tan_csodallak_amde_nem_ertelek_de_kepzetem_hegyvolgyedet_bejarja">Programozó Páternoszter</link>
        </para>
        <para>
            <link xlink:href="https://sourceforge.net/projects/udprog/">UDPROG közösség</link>
        </para>
    </section>                  
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
            A projektet a <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/apbs02.html">Javát tanítok</link> oldalán
            található útmutató alapján készítettem el.
            <programlisting><![CDATA[public class MandelbrotHalmaz extends java.awt.Frame implements Runnable {

    protected double a, b, c, d;

    protected int szélesség, magasság;

    protected java.awt.image.BufferedImage kép;

    protected int iterációsHatár = 255;

    protected boolean számításFut = false;

    protected int sor = 0;

    protected static int pillanatfelvételSzámláló = 0;

    public MandelbrotHalmaz(double a, double b, double c, double d,
            int szélesség, int iterációsHatár) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.szélesség = szélesség;
        this.iterációsHatár = iterációsHatár;

        this.magasság = (int)(szélesség * ((d-c)/(b-a)));

        kép = new java.awt.image.BufferedImage(szélesség, magasság,
                java.awt.image.BufferedImage.TYPE_INT_RGB);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent e) {
                setVisible(false);
                System.exit(0);
            }
        });]]></programlisting>
            Deklaráljuk a komplex sík tartományát, illetve a síkra vetített hálót és adatait.
        </para>
        <para>
            <programlisting><![CDATA[addKeyListener(new java.awt.event.KeyAdapter() {

            public void keyPressed(java.awt.event.KeyEvent e) {
                if(e.getKeyCode() == java.awt.event.KeyEvent.VK_S)
                    pillanatfelvétel();

                else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_N) {
                    if(számításFut == false) {
                        MandelbrotHalmaz.this.iterációsHatár += 256;

                        számításFut = true;
                        new Thread(MandelbrotHalmaz.this).start();
                    }

                } else if(e.getKeyCode() == java.awt.event.KeyEvent.VK_M) {
                    if(számításFut == false) {
                        MandelbrotHalmaz.this.iterációsHatár += 10*256;

                        számításFut = true;
                        new Thread(MandelbrotHalmaz.this).start();
                    }
                }
            }
        });]]></programlisting>
            Figyeljük a billentyűzetről érkező inputokat. 
            <itemizedlist>
                <listitem>
                    <para>
                        S lenyomására pillanatkép készül.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        N lenyomására újraszámoljuk és kicsivel pontosabb számolást végzünk.
                    </para>
                </listitem>
                <listitem>
                    <para>
                        M lenyomására újraszámoljuk és sokkal pontosabb számolást végzünk.
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            <programlisting><![CDATA[        setTitle("A Mandelbrot halmaz");
        setResizable(false);
        setSize(szélesség, magasság);
        setVisible(true);

        számításFut = true;
        new Thread(this).start();
    }

    public void paint(java.awt.Graphics g) {

        g.drawImage(kép, 0, 0, this);

        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }
    }]]></programlisting>
            A megjeleníteni kívánt ablak beállításai. A számítást futás közben egy vörös szakasszal jelöljük.
        </para>
        <para>
            <programlisting><![CDATA[    public void pillanatfelvétel() {

        java.awt.image.BufferedImage mentKép =
                new java.awt.image.BufferedImage(szélesség, magasság,
                java.awt.image.BufferedImage.TYPE_INT_RGB);
        java.awt.Graphics g = mentKép.getGraphics();
        g.drawImage(kép, 0, 0, this);
        g.setColor(java.awt.Color.BLUE);
        g.drawString("a=" + a, 10, 15);
        g.drawString("b=" + b, 10, 30);
        g.drawString("c=" + c, 10, 45);
        g.drawString("d=" + d, 10, 60);
        g.drawString("n=" + iterációsHatár, 10, 75);
        g.dispose();

        StringBuffer sb = new StringBuffer();
        sb = sb.delete(0, sb.length());
        sb.append("MandelbrotHalmaz_");
        sb.append(++pillanatfelvételSzámláló);
        sb.append("_");

        sb.append(a);
        sb.append("_");
        sb.append(b);
        sb.append("_");
        sb.append(c);
        sb.append("_");
        sb.append(d);
        sb.append(".png");

        try {
            javax.imageio.ImageIO.write(mentKép, "png",
                    new java.io.File(sb.toString()));
        } catch(java.io.IOException e) {
            e.printStackTrace();
        }
    }]]></programlisting>
            A pillanatkép elmentése, a kép adatainak beállítása, illetve az aktuális adatok 
            képre mentése.
        </para>
        <para>
            <programlisting><![CDATA[     public void run() {

        double dx = (b-a)/szélesség;
        double dy = (d-c)/magasság;
        double reC, imC, reZ, imZ, ujreZ, ujimZ;
        int rgb;

        int iteráció = 0;

        for(int j=0; j<magasság; ++j) {
            sor = j;
            for(int k=0; k<szélesség; ++k) {

                reC = a+k*dx;
                imC = d-j*dy;

                reZ = 0;
                imZ = 0;
                iteráció = 0;

                while(reZ*reZ + imZ*imZ < 4 && iteráció < iterációsHatár) {

                    ujreZ = reZ*reZ - imZ*imZ + reC;
                    ujimZ = 2*reZ*imZ + imC;
                    reZ = ujreZ;
                    imZ = ujimZ;
                    
                    ++iteráció;
                    
                }

                iteráció %= 256;

                rgb = (255-iteráció)|
                        ((255-iteráció) << 8) |
                        ((255-iteráció) << 16);

                kép.setRGB(k, j, rgb);
            }
            repaint();
        }
        számításFut = false;
    }

    public static void main(String[] args) {

        new MandelbrotHalmaz(-2.0, .7, -1.35, 1.35, 600, 255);
    }
}]]></programlisting>
            A program lelke, ami a halmaz számítását végzi. a Dupla for ciklussal végigmegyünk a 
            szélesség x magasság dimenzióin. A <prompt>c = (reC, imC)</prompt> a rácspontoknak megfelelő komplex szám.
            <prompt>z_{n+1} = z_n * z_n + c</prompt>-t iteráljuk amíg el nem érjük a 2-t, vagy az iterációs határt.
            Ha elérjük a határt, akkor a vizsgált pont a halmaz része, tehát az iteráció konvergens.
        </para>
        <para>
            A nagyító programot ennek a programnak a továbbbfejlesztésével hozhatjuk létre.
            Ehhez létrehozunk egy újabb osztályt.
            <programlisting><![CDATA[public class MandelbrotHalmazNagyító extends MandelbrotHalmaz {

    private int x, y;

    private int mx, my;]]></programlisting>
            Itt megjegyezzük a nagyítani kívánt terület bal felső sarkát, valamint a terület szélességét és magasságát.
        </para>
        <para>
            <programlisting><![CDATA[    public MandelbrotHalmazNagyító(double a, double b, double c, double d,
            int szélesség, int iterációsHatár) {

        super(a, b, c, d, szélesség, iterációsHatár);
        setTitle("A Mandelbrot halmaz nagyításai");

        addMouseListener(new java.awt.event.MouseAdapter() {

            public void mousePressed(java.awt.event.MouseEvent m) {

                x = m.getX();
                y = m.getY();
                mx = 0;
                my = 0;
                repaint();
            }

            public void mouseReleased(java.awt.event.MouseEvent m) {
                double dx = (MandelbrotHalmazNagyító.this.b
                        - MandelbrotHalmazNagyító.this.a)
                        /MandelbrotHalmazNagyító.this.szélesség;
                double dy = (MandelbrotHalmazNagyító.this.d
                        - MandelbrotHalmazNagyító.this.c)
                        /MandelbrotHalmazNagyító.this.magasság;

                new MandelbrotHalmazNagyító(MandelbrotHalmazNagyító.this.a+x*dx,
                        MandelbrotHalmazNagyító.this.a+x*dx+mx*dx,
                        MandelbrotHalmazNagyító.this.d-y*dy-my*dy,
                        MandelbrotHalmazNagyító.this.d-y*dy,
                        600,
                        MandelbrotHalmazNagyító.this.iterációsHatár);
            }
        });

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {

            public void mouseDragged(java.awt.event.MouseEvent m) {

                mx = m.getX() - x;
                my = m.getY() - y;
                repaint();
            }
        });
    }]]></programlisting>
            Egérkattintással és nyomvatartással kijelöljük a nagyítani kívánt területet.
            Ha felengedjük az egeret, akkor az újonnak kijelölt terület ismét kiszámításra kerül.
        </para>
        <para>
            <programlisting><![CDATA[    public void paint(java.awt.Graphics g) {

         g.drawImage(kép, 0, 0, this);
       
        if(számításFut) {
            g.setColor(java.awt.Color.RED);
            g.drawLine(0, sor, getWidth(), sor);
        }         

        g.setColor(java.awt.Color.GREEN);
        g.drawRect(x, y, mx, my);
    }

    public static void main(String[] args) {

        new MandelbrotHalmazNagyító(-2.0, .7, -1.35, 1.35, 600, 255);
    }
}]]></programlisting>
            A nagyítani kívánt területet újrarajzoltatjuk. ha éppen számol a program, akkor 
            egy vörös szakasszal jelöljük, hogy hol tart éppen.
        </para>
        <figure>
            <title>Mandelbrot nagyítása JAVA környezetben</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/nagyít3.png" scale="30" />
                </imageobject>
                <textobject>
                    <phrase>Mandelbrot nagyítása JAVA környezetben</phrase>
                </textobject>
            </mediaobject>
        </figure>
    </section>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
</chapter>                
